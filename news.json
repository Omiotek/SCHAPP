import React, { useEffect, useState, useRef, useCallback } from 'react';
import { View, Text, FlatList, TouchableWithoutFeedback, Image, StyleSheet, ActivityIndicator, Animated, Dimensions } from 'react-native';
import { useFocusEffect } from '@react-navigation/native';
import * as Linking from 'expo-linking';

const { width } = Dimensions.get('window');
const IMAGE_HEIGHT = 200;
const IMAGE_OFFSET = 50;

export default function NewsScreen() {
  const [articles, setArticles] = useState([]);
  const [loading, setLoading] = useState(true);
  const scrollY = useRef(new Animated.Value(0)).current;
  const jsonUrl = "https://raw.githubusercontent.com/Omiotek/SCHAPP/refs/heads/main/news.json";

  // Pobieranie newsów przy każdym wejściu do zakładki
  useFocusEffect(
    useCallback(() => {
      const fetchNews = async () => {
        try {
          setLoading(true);
          const response = await fetch(jsonUrl);
          const data = await response.json();
          setArticles(data);
        } catch (error) {
          console.error("Błąd podczas pobierania newsów:", error);
        } finally {
          setLoading(false);
        }
      };

      fetchNews();
    }, [])
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#ffffff" />
        <Text style={styles.loadingText}>Ładowanie newsów...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Animated.FlatList
        data={articles}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item, index }) => (
          <NewsCard item={item} index={index} scrollY={scrollY} />
        )}
        showsVerticalScrollIndicator={false}
        onScroll={Animated.event(
          [{ nativeEvent: { contentOffset: { y: scrollY } } }],
          { useNativeDriver: true }
        )}
      />
    </View>
  );
}

const NewsCard = ({ item, index, scrollY }) => {
  const scaleAnim = useRef(new Animated.Value(1)).current;
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const inputRange = [-1, 0, IMAGE_HEIGHT * index, IMAGE_HEIGHT * (index + 2)];
  const translateY = scrollY.interpolate({
    inputRange,
    outputRange: [-IMAGE_OFFSET, 0, 0, IMAGE_OFFSET],
  });

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 500,
      delay: index * 100,
      useNativeDriver: true,
    }).start();
  }, []);

  const handlePressIn = () => {
    Animated.spring(scaleAnim, {
      toValue: 0.95,
      friction: 5,
      useNativeDriver: true,
    }).start();
  };

  const handlePressOut = () => {
    Animated.spring(scaleAnim, {
      toValue: 1,
      friction: 5,
      useNativeDriver: true,
    }).start();
    Linking.openURL(item.link);
  };

  return (
    <TouchableWithoutFeedback onPressIn={handlePressIn} onPressOut={handlePressOut}>
      <Animated.View style={[styles.card, { transform: [{ scale: scaleAnim }], opacity: fadeAnim }]}>
        <Animated.Image
          source={{ uri: item.image }}
          style={[styles.image, { transform: [{ translateY }] }]}
        />
        <View style={styles.textContainer}>
          <Text style={styles.title}>{item.title}</Text>
          <Text style={styles.date}>{item.date}</Text>
          <Text style={styles.excerpt}>{item.description}</Text>
        </View>
      </Animated.View>
    </TouchableWithoutFeedback>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#000000',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#000000',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 18,
    color: '#ffffff',
  },
  card: {
    marginBottom: 16,
    borderRadius: 15,
    overflow: 'hidden',
    backgroundColor: '#1a1a1a',
    elevation: 10,
    shadowColor: '#ffffff',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.4,
    shadowRadius: 5,
  },
  image: {
    width: '100%',
    height: IMAGE_HEIGHT,
    borderTopLeftRadius: 15,
    borderTopRightRadius: 15,
  },
  textContainer: {
    padding: 16,
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#ffffff',
    marginBottom: 5,
  },
  date: {
    fontSize: 14,
    color: '#cccccc',
    marginBottom: 5,
  },
  excerpt: {
    fontSize: 16,
    color: '#ffffff',
    marginBottom: 10,
  },
});